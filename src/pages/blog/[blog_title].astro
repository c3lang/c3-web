---
import "../../styles/global.css";
import "../../content/docs.css";

import Navbar from "../../components/navbar.astro";
import Blogitem from "../../components/blogitem.astro";
import { titleToLowerCaseKebab } from "../../components/blogitem.astro";

import { getCollection } from 'astro:content';


/**
 * Return static data on every blog entry, matches URLs
 */
export async function getStaticPaths() {
	
	const allBlogs = await getCollection('blogs')
	
	
	const sortedAllBlogs = allBlogs
		.sort((item1, item2) => item1?.data?.date <= item2?.data?.date)
		.reverse()

	const pages = sortedAllBlogs.map(
		function(blogPost) {
			return {
				params: { blog_title: titleToLowerCaseKebab(blogPost?.data?.title) } 
			}
		}
	)

	return pages
}

const { blog_title } = Astro.params;


const blogPosts = Object.values(import.meta.glob('../../content/blogs/*.md', { eager: true })) ;

const BlogData = blogPosts.filter((item) => titleToLowerCaseKebab(item?.frontmatter?.title) === blog_title )?.[0]

if (!BlogData) {
  // Handle Error, for example:
  throw new Error(`Could not find blog post: ${blog_title}`);
}

const sortedOtherBlogs = blogPosts
	.filter((item) => item?.frontmatter?.title !== BlogData?.frontmatter?.title )
	.sort((item1, item2) => item1?.frontmatter?.date <= item2?.frontmatter?.date)
	.reverse()
	.slice(0,10)

---


<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
	<meta
		name="description"
		content="C3 is a programming language that builds on the syntax and semantics of the C language, with the goal of evolving it while still retaining familiarity for C programmers."
  	/>
  	<meta name="og:title" content="C3" />
  	<meta
  		name="og:description"
    	content="C3 is a programming language that builds on the syntax and semantics of the C language, with the goal of evolving it while still retaining familiarity for C programmers."
  	/>
	<meta content="/logo.svg" property="og:image" />
	<meta content="#4355ec" data-react-helmet="true" name="theme-color" />
	<meta name="og:image" content="/logo.svg" />

  	<link rel="icon" href="/ico.svg" type="image/x-icon" />

	<title>C3 | Blog | An evolution, not a revolution</title>
	<!-- Styles needed for styling the markdown added n -->
	<script>
    	import "../../styles/global.css";
		import "../../content/docs.css";
  	</script>
</head>



<body class="dark:bg-stone-950 bg-white">
	<div style="height: auto">
	
		<Navbar />
		
		<div class="
			relative
			overflow-hidden
			"
		>
		<div class="
		relative
		overflow-hidden
		"
	>
		<div class="
			max-w-[48rem] 
			mx-auto 
			px-4 
			sm:px-6 
			lg:px-8 
			pt-8
			md:pt-24 
			pb-12
			"
		>
			<div class="mt-5 mx-auto">
			
				<h1 class="
					block 
					text-3xl 
					font-bold 
					text-gray-800 
					sm:text-4xl 
					lg:text-6xl 
					lg:leading-tight 
					dark:text-white
					text-center
					mb-8
					md:mb-18
					"
				>
					<a href="/blog">
						The
						<span class="
							bg-clip-text 
							bg-gradient-to-l 
							from-violet-600 
							to-blue-600 
							text-transparent"
						>
						C3
						</span>
						Blog
					</a>	

				</h1>			
					
					
					<!-- Show only current blogpost -->
					<Blogitem 
						title={BlogData?.frontmatter?.title} 
						date={BlogData?.frontmatter?.date?.slice(0,10)}
					>
						 <BlogData.Content/>
					</Blogitem>
					
					
					<div class="
						grid
						grid-cols-1
						md:grid-cols-2
						items-start
					">
						
						<h3 class="
							md:col-span-2
							md:text-center
							text-[var(--sl-color-gray-1)]
							mt-8
							mb-4
							font-bold
							text-3xl
						">
							Recent Blog Posts
						</h3>
						
						
						{sortedOtherBlogs.map((BlogPost) => {
							
							const blogPostUrl = titleToLowerCaseKebab(BlogPost?.frontmatter?.title)
							
							return <div class="
								
								hover:bg-slate-100
								hover:dark:bg-slate-800
								rounded-3xl					
							">
								<a class="
									text-[var(--sl-color-text-accent)]
									my-4
									text-justify
									font-medium
									flex
									flex-row
									p-4
									"
									href={"/blog/"+blogPostUrl}
								>
									{/* TODO: add lookup for different authors, once we have different authors */}
									<img class="
										hidden
										sm:block
										rounded-full
										w-12
										h-12
										"
										src={"/lerno.png"}
									/>
									
									<div class="
										flex
										flex-col
										sm:ml-4
										
										text-[var(--sl-color-gray-1)]
									">
										<h3 class="
											text-xl 
											font-bold
											"
										>
											{BlogPost?.frontmatter?.title}
										</h3>
										<p>{BlogPost?.frontmatter?.author} â€” {BlogPost?.frontmatter?.date?.slice(0,10)}</p>
									</div>
								</a>
							
							</div>
						} 
						)}
						
					</div>
					
				
				</div>
			</div>

		</div>
	</div>
</body>