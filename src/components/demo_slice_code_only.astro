---

import type { 
    HighlighterGeneric, 
    BundledLanguage, 
    BundledTheme 
} from 'shiki'

interface Props {
    buttons: string[];
    code: {
            name: string;
            desktop_code: string;
            mobile_code: string;
        }[];
    highlighter: HighlighterGeneric<BundledLanguage, BundledTheme>
    height: string;
}

const { height, buttons, code, highlighter } = Astro.props;

import CodeRender from "./code_render.astro";


---


<script>

// make a click handler specific for one localStorageKey
function generateClickHandler(localStorageKey) {

    return function buttonClickHandler(event) {

        if (
            localStorage[localStorageKey] != "" &&
            localStorage[localStorageKey] != null &&
            localStorage[localStorageKey] != undefined
        ) {
            // remove any style adjustments from previous tab was selected
            if (event.target.id != localStorage[localStorageKey]) {


                let previousTabElement = document.getElementById(localStorage[localStorageKey]);

                // adjust styles showing new tab is selected
                previousTabElement.classList.remove("bg-blue-500");
                previousTabElement.classList.add("bg-gray-100");

                previousTabElement.classList.remove("dark:bg-blue-600");
                previousTabElement.classList.add("dark:bg-gray-900");

                previousTabElement.classList.remove("text-white");
                previousTabElement.classList.add("text-black");
                previousTabElement.classList.add("dark:text-white");
                previousTabElement.classList.add("dark:hover:text-blue-500");
                previousTabElement.classList.add("hover:text-blue-500");

                // make the code blocks hidden from previously selected tab
                let previousDesktopCode = document.getElementById(localStorage[localStorageKey] + "_desktop_code")

                let previousMobileCode = document.getElementById(localStorage[localStorageKey] + "_mobile_code")

                previousDesktopCode.classList.remove("xl:flex");
                // previousDesktopCode.classList.add("hidden");

                previousMobileCode.classList.remove("flex");
                previousMobileCode.classList.remove("xl:hidden");
                previousMobileCode.classList.add("hidden");

            }
        }


        // Changing the button properties on click
        event.target.classList.remove("bg-gray-100");
        event.target.classList.remove("dark:bg-gray-900");
       
       

        event.target.classList.add("dark:bg-blue-600");
        event.target.classList.add("bg-blue-500");      

        event.target.classList.remove("text-black");
        event.target.classList.remove("dark:hover:text-blue-500");
        event.target.classList.remove("hover:text-blue-500");
        event.target.classList.add("dark:text-white");
        event.target.classList.add("text-white");
        
        
        
        

        // storing which button was clicked
        localStorage[localStorageKey] = event.target.id;
        

        // changing the code visibility based on the button clicked
        let newDesktopCode = document.getElementById(
            `${localStorage[localStorageKey]}_desktop_code`,
        );

        let newMobileCode = document.getElementById(
            `${localStorage[localStorageKey]}_mobile_code`,
        );

        newDesktopCode.classList.add("xl:flex");
        newDesktopCode.classList.add("hidden");

        newMobileCode.classList.remove("hidden");
        newMobileCode.classList.add("flex");
        newMobileCode.classList.add("xl:hidden");
    }
}

//========================================
// Setup for "Ergonomics & Safety"
const ergoLocalStorageKey ="ergonomics_and_safety_selected_tab_id";
const ergoButtons = ["Optionals", "Defer", "Slices", "Contracts"]
const ergoHandler = generateClickHandler(ergoLocalStorageKey);

ergoButtons.forEach(buttonName => {
    document.getElementById(buttonName).addEventListener("mousedown", ergoHandler);
});

// default select the first element
localStorage[ergoLocalStorageKey] = ergoButtons[0];

//========================================
// Performance By Default

const perfLocalStorageKey = "perf_by_default_selected_tab_id";

const perfButtons = [
    "Temp Allocator",
    "SIMD",
    "Inline ASM",
    "Threads"
];

const perfByDefaultHandler = generateClickHandler(perfLocalStorageKey);

perfButtons.forEach(buttonName => {
    document.getElementById(buttonName).addEventListener("mousedown", perfByDefaultHandler);
});

// default select the first element
localStorage[perfLocalStorageKey] = perfButtons[0];

//========================================
// Batteries Included Standard Library

const stdLibLocalStorageKey = "perf_by_default_selected_tab_id";

const stdLibButtons = [
    "Containers",
    "Strings",
    "Cross Platform",
    "Platform Access",
];

const stdLibHandler = generateClickHandler(stdLibLocalStorageKey);

stdLibButtons.forEach(buttonName => {
    document.getElementById(buttonName).addEventListener("mousedown", stdLibHandler);
});

// default select the first element
localStorage[stdLibLocalStorageKey] = stdLibButtons[0];





</script>


<div class=`
    grid
    grid-cols-[repeat(2,minmax(0,1fr))]
    grid-rows-[repeat(${((buttons.length - buttons.length%2) / 2) + buttons.length%2},minmax(0,1fr))]

    md:grid-cols-${buttons.length}
    md:grid-cols-1

    gap-2
    


    dark:text-gray-200
    md:mx-0
`>

    <!-- Code container -->
    <div class=`
        ${height}
        flex
        flex-col
        justify-start 
        lg:items-start
        items-end
        col-span-2
        
        md:col-span-4
        grid
        grid-rows-1
        w-full
        overflow-x-auto
        bg-white
        dark:bg-gradient-to-tr
        dark:from-[hsl(224,12%,10%)]
        dark:to-[hsl(224,12%,12%)]
        `
    >

        {code.map((item, index) => (
            <CodeRender 
                is_default={index==0 ? true : false}
                name={item.name}
                desktop_code={item.desktop_code}
                mobile_code={item.mobile_code}
                highlighter={highlighter}
            />
        ))}

    
    </div>


    
    <!--  Buttons -->
    {buttons.map((item, index) => (
        <button class=`

            rounded-lg
            p-3
            mt-4
            border-2
            border-blue-500
            dark:border-blue-500
            flex
            justify-center
            items-center
            
            ${index ===0 && "dark:text-white text-white bg-blue-600"}
            ${index != 0 && "dark:text-white hover:text-blue-500 dark:hover:text-blue-500 bg-gray-100 dark:bg-gray-900"}
            `
            id={item}
            
        >
            {item}
        </button>
    ))}

</div>

