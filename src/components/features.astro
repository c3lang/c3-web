<hr
  class="w-96 h-1 mx-auto my-4 bg-gray-100 border-0 rounded md:my-10 dark:bg-gray-900"
/>

<div class="max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto">
  <div class="grid md:grid-cols-2 gap-12">
    <div class="space-y-6 lg:space-y-10">
      <div class="flex">
        <span
          class="flex-shrink-0 inline-flex justify-center items-center w-[46px] h-[46px] rounded-full border border-blue-700 bg-white text-gray-800 shadow-sm mx-auto dark:bg-slate-900 dark:border-blue-700 dark:text-gray-200"
        >
          <box-icon name="exclude" color="currentColor" fill="currentColor"
          ></box-icon>
        </span>
        <div class="ml-5 sm:ml-8">
          <h3
            class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
          >
            Full C ABI Compatibility
          </h3>
          <p class="mt-1 text-gray-600 dark:text-gray-400">
            C3 fits right into your C/C++ application with full C ABI
            compatibility out of the box: no need for special "C compatible"
            types or functions, no limitations on what C3 features you can use
            from C.
          </p>
        </div>
      </div>

      <div class="flex">
        <span
          class="flex-shrink-0 inline-flex justify-center items-center w-[46px] h-[46px] rounded-full border border-blue-700 bg-white text-gray-800 shadow-sm mx-auto dark:bg-slate-900 dark:border-blue-700 dark:text-gray-200"
        >
          <box-icon
            type="solid"
            name="package"
            color="currentColor"
            fill="currentColor"></box-icon>
        </span>
        <div class="ml-5 sm:ml-8">
          <h3
            class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
          >
            Module System
          </h3>
          <p class="mt-1 text-gray-600 dark:text-gray-400">
            A simple and straightforward module system that doesn't get into the
            way with defaults that makes sense.
          </p>
        </div>
      </div>

      <div class="flex">
        <span
          class="flex-shrink-0 inline-flex justify-center items-center w-[46px] h-[46px] rounded-full border border-blue-700 bg-white text-gray-800 shadow-sm mx-auto dark:bg-slate-900 dark:border-blue-700 dark:text-gray-200"
        >
          <box-icon name="command" color="currentColor" fill="currentColor"
          ></box-icon>
        </span>
        <div class="ml-5 sm:ml-8">
          <h3
            class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
          >
            Semantic Macros
          </h3>
          <p class="mt-1 text-gray-600 dark:text-gray-400">
            Macros that are just as easy to read and write as regular functions.
            Packing much more power than C's preprocessor, they're deliberately
            balanced to ensure that code reading isn't made difficult.
          </p>
        </div>
      </div>
    </div>
    <div class="lg:w-3/4">
      <h2 class="text-3xl text-gray-800 font-bold lg:text-4xl dark:text-white">
        C3 is an evolution, not a revolution:
        <span
          class="bg-clip-text bg-gradient-to-tl from-blue-600 to-violet-600 text-transparent"
          >the C-like for programmers who like C.</span
        >
      </h2>
      <p class="mt-3 text-gray-800 dark:text-gray-400">
        C3 is a programming language that builds on the syntax and semantics of
        the C language, with the goal of evolving it while still retaining
        familiarity for C programmers.<br /><br />
        Thanks to full ABI compatibility with C, it's possible to mix C and C3 in
        the same project with no effort. As a demonstration, vkQuake was compiled
        with a small portion of the code converted to C3 and compiled with the c3c
        compiler.
      </p>
      <a
        class="mt-5 inline-flex items-center gap-x-2 font-medium text-blue-600 dark:text-blue-500"
        href="https://github.com/c3lang/vkQuake"
      >
        The fork can be found here
        <svg
          class="w-2.5 h-2.5 transition ease-in-out group-hover:translate-x-1"
          width="16"
          height="16"
          viewBox="0 0 16 16"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M0.975821 6.92249C0.43689 6.92249 -3.50468e-07 7.34222 -3.27835e-07 7.85999C-3.05203e-07 8.37775 0.43689 8.79749 0.975821 8.79749L12.7694 8.79748L7.60447 13.7596C7.22339 14.1257 7.22339 14.7193 7.60447 15.0854C7.98555 15.4515 8.60341 15.4515 8.98449 15.0854L15.6427 8.68862C16.1191 8.23098 16.1191 7.48899 15.6427 7.03134L8.98449 0.634573C8.60341 0.268455 7.98555 0.268456 7.60447 0.634573C7.22339 1.00069 7.22339 1.59428 7.60447 1.9604L12.7694 6.92248L0.975821 6.92249Z"
            fill="currentColor"></path>
        </svg>
      </a>
    </div>
  </div>
</div>
<!-- Icon Blocks -->
<div class="max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto">
  <div class="mx-auto">
    <!-- Grid -->
    <div class="grid md:grid-cols-2 gap-6 lg:gap-12">
      <div class="space-y-6 lg:space-y-10">
        <!-- Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            type="solid"
            name="pen"
            color="currentColor"
            fill="currentColor"
            size="24px"
          >
          </box-icon>

          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Gradual Contracts
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              C3 brings programming-by-contract to the mainstream with
              unobtrusive contracts that are used to express both runtime and
              compile-time constraints.
            </p>
          </div>
        </div>
        <!-- End Icon Block -->

        <!-- Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="comment-error"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Zero Overhead Errors
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              Error handling that combines the best parts of "Result" errors
              with the easy use of exceptions and integrates seamlessly with C.
            </p>
          </div>
        </div>
        <!-- End Icon Block -->

        <!-- Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="bracket"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Built-in slices and slicing
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              Slices are type safe "pointer + length" types which natively
              supports copying and comparison.
            </p>
          </div>
        </div>
        <!-- End Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="package"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Generic modules
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              C3 generic modules offer superior simplicity and clarity for
              creating generic types.
            </p>
          </div>
        </div>
        <!-- End Icon Block -->
      </div>
      <!-- End Col -->

      <div class="space-y-6 lg:space-y-10">
        <!-- Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="refresh"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Runtime and compile reflection
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              Type introspection is available both at compile time and runtime,
              powering flexible macros and functions
            </p>
          </div>
        </div>
        <!-- End Icon Block -->

        <!-- Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="code"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Inline Assembly
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              Write asm as regular inline code without using strings or cryptic
              constraints.
            </p>
          </div>
        </div>
        <!-- End Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="bug"
            type="solid"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Debug with safety checks
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              Feel confident in your code's correctness: in debug mode the
              compiler inserts extensive runtime bounds checks and value checks,
              which together with contracts will let you catch bugs early.
            </p>
          </div>
        </div>
        <!-- End Icon Block -->
        <div class="flex">
          <box-icon
            class="text-black dark:text-white"
            name="code"
            color="currentColor"
            fill="currentColor"
            size="24px"></box-icon>
          <div class="ms-5 sm:ms-8">
            <h3
              class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-200"
            >
              Detailed stacktraces
            </h3>
            <p class="mt-1 text-gray-600 dark:text-gray-400">
              No more anonymous "segmentation fault" errors: the C3 standard
              library enables detailed stacktraces out of the box for your debug
              builds.
            </p>
          </div>
        </div>
      </div>
      <!-- End Col -->
    </div>
    <!-- End Grid -->
  </div>
</div>

<hr
  class="w-96 h-1 mx-auto my-4 bg-gray-100 border-0 rounded md:my-10 dark:bg-gray-900"
/>
